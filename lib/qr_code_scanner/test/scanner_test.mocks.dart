// Mocks generated by Mockito 5.2.0 from annotations
// in qr_code_scanner/test/scanner_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/services.dart' as _i2;
import 'package:mobile_scanner/mobile_scanner.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMethodChannel_0 extends _i1.Fake implements _i2.MethodChannel {}

class _FakeEventChannel_1 extends _i1.Fake implements _i2.EventChannel {}

class _FakeValueNotifier_2<T> extends _i1.Fake implements _i3.ValueNotifier<T> {
}

class _FakeStreamController_3<T> extends _i1.Fake
    implements _i4.StreamController<T> {}

/// A class which mocks [MobileScannerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMobileScannerController extends _i1.Mock
    implements _i5.MobileScannerController {
  MockMobileScannerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MethodChannel get methodChannel =>
      (super.noSuchMethod(Invocation.getter(#methodChannel),
          returnValue: _FakeMethodChannel_0()) as _i2.MethodChannel);
  @override
  set methodChannel(_i2.MethodChannel? _methodChannel) =>
      super.noSuchMethod(Invocation.setter(#methodChannel, _methodChannel),
          returnValueForMissingStub: null);
  @override
  _i2.EventChannel get eventChannel =>
      (super.noSuchMethod(Invocation.getter(#eventChannel),
          returnValue: _FakeEventChannel_1()) as _i2.EventChannel);
  @override
  set eventChannel(_i2.EventChannel? _eventChannel) =>
      super.noSuchMethod(Invocation.setter(#eventChannel, _eventChannel),
          returnValueForMissingStub: null);
  @override
  set events(_i4.StreamSubscription<dynamic>? _events) =>
      super.noSuchMethod(Invocation.setter(#events, _events),
          returnValueForMissingStub: null);
  @override
  _i3.ValueNotifier<_i5.MobileScannerArguments?> get args =>
      (super.noSuchMethod(Invocation.getter(#args),
              returnValue: _FakeValueNotifier_2<_i5.MobileScannerArguments?>())
          as _i3.ValueNotifier<_i5.MobileScannerArguments?>);
  @override
  _i3.ValueNotifier<_i5.TorchState> get torchState =>
      (super.noSuchMethod(Invocation.getter(#torchState),
              returnValue: _FakeValueNotifier_2<_i5.TorchState>())
          as _i3.ValueNotifier<_i5.TorchState>);
  @override
  _i3.ValueNotifier<_i5.CameraFacing> get cameraFacingState =>
      (super.noSuchMethod(Invocation.getter(#cameraFacingState),
              returnValue: _FakeValueNotifier_2<_i5.CameraFacing>())
          as _i3.ValueNotifier<_i5.CameraFacing>);
  @override
  set cameraFacingState(
          _i3.ValueNotifier<_i5.CameraFacing>? _cameraFacingState) =>
      super.noSuchMethod(
          Invocation.setter(#cameraFacingState, _cameraFacingState),
          returnValueForMissingStub: null);
  @override
  _i5.CameraFacing get facing => (super.noSuchMethod(Invocation.getter(#facing),
      returnValue: _i5.CameraFacing.front) as _i5.CameraFacing);
  @override
  set facing(_i5.CameraFacing? _facing) =>
      super.noSuchMethod(Invocation.setter(#facing, _facing),
          returnValueForMissingStub: null);
  @override
  bool get hasTorch =>
      (super.noSuchMethod(Invocation.getter(#hasTorch), returnValue: false)
          as bool);
  @override
  set hasTorch(bool? _hasTorch) =>
      super.noSuchMethod(Invocation.setter(#hasTorch, _hasTorch),
          returnValueForMissingStub: null);
  @override
  _i4.StreamController<_i5.Barcode> get barcodesController =>
      (super.noSuchMethod(Invocation.getter(#barcodesController),
              returnValue: _FakeStreamController_3<_i5.Barcode>())
          as _i4.StreamController<_i5.Barcode>);
  @override
  set barcodesController(
          _i4.StreamController<_i5.Barcode>? _barcodesController) =>
      super.noSuchMethod(
          Invocation.setter(#barcodesController, _barcodesController),
          returnValueForMissingStub: null);
  @override
  bool get isStarting =>
      (super.noSuchMethod(Invocation.getter(#isStarting), returnValue: false)
          as bool);
  @override
  set isStarting(bool? _isStarting) =>
      super.noSuchMethod(Invocation.setter(#isStarting, _isStarting),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i5.Barcode> get barcodes =>
      (super.noSuchMethod(Invocation.getter(#barcodes),
          returnValue: Stream<_i5.Barcode>.empty()) as _i4.Stream<_i5.Barcode>);
  @override
  void handleEvent(Map<dynamic, dynamic>? event) =>
      super.noSuchMethod(Invocation.method(#handleEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> start() => (super.noSuchMethod(Invocation.method(#start, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> stop() => (super.noSuchMethod(Invocation.method(#stop, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> toggleTorch() =>
      (super.noSuchMethod(Invocation.method(#toggleTorch, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> switchCamera() =>
      (super.noSuchMethod(Invocation.method(#switchCamera, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> analyzeImage(String? path) =>
      (super.noSuchMethod(Invocation.method(#analyzeImage, [path]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void ensure(String? name) =>
      super.noSuchMethod(Invocation.method(#ensure, [name]),
          returnValueForMissingStub: null);
}
