// Mocks generated by Mockito 5.4.4 from annotations
// in sharezone/test_goldens/settings/change_type_of_user/change_type_of_user_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sharezone/settings/src/subpages/my_profile/change_type_of_user/change_type_of_user_analytics.dart'
    as _i2;
import 'package:sharezone/settings/src/subpages/my_profile/change_type_of_user/change_type_of_user_controller.dart'
    as _i4;
import 'package:sharezone/settings/src/subpages/my_profile/change_type_of_user/change_type_of_user_service.dart'
    as _i3;
import 'package:user/user.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChangeTypeOfUserAnalytics_0 extends _i1.SmartFake
    implements _i2.ChangeTypeOfUserAnalytics {
  _FakeChangeTypeOfUserAnalytics_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChangeTypeOfUserService_1 extends _i1.SmartFake
    implements _i3.ChangeTypeOfUserService {
  _FakeChangeTypeOfUserService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChangeTypeOfUserController].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeTypeOfUserController extends _i1.Mock
    implements _i4.ChangeTypeOfUserController {
  @override
  _i2.ChangeTypeOfUserAnalytics get analytics => (super.noSuchMethod(
        Invocation.getter(#analytics),
        returnValue: _FakeChangeTypeOfUserAnalytics_0(
          this,
          Invocation.getter(#analytics),
        ),
        returnValueForMissingStub: _FakeChangeTypeOfUserAnalytics_0(
          this,
          Invocation.getter(#analytics),
        ),
      ) as _i2.ChangeTypeOfUserAnalytics);
  @override
  _i3.ChangeTypeOfUserService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeChangeTypeOfUserService_1(
          this,
          Invocation.getter(#service),
        ),
        returnValueForMissingStub: _FakeChangeTypeOfUserService_1(
          this,
          Invocation.getter(#service),
        ),
      ) as _i3.ChangeTypeOfUserService);
  @override
  _i4.ChangeTypeOfUserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i5.dummyValue<_i4.ChangeTypeOfUserState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i5.dummyValue<_i4.ChangeTypeOfUserState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.ChangeTypeOfUserState);
  @override
  set state(_i4.ChangeTypeOfUserState? _state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          _state,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set initialTypeOfUser(_i6.TypeOfUser? _initialTypeOfUser) =>
      super.noSuchMethod(
        Invocation.setter(
          #initialTypeOfUser,
          _initialTypeOfUser,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set selectedTypeOfUser(_i6.TypeOfUser? _selectedTypeOfUser) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedTypeOfUser,
          _selectedTypeOfUser,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i7.Future<void> changeTypeOfUser() => (super.noSuchMethod(
        Invocation.method(
          #changeTypeOfUser,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void setSelectedTypeOfUser(_i6.TypeOfUser? typeOfUser) => super.noSuchMethod(
        Invocation.method(
          #setSelectedTypeOfUser,
          [typeOfUser],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
