// Mocks generated by Mockito 5.4.4 from annotations
// in sharezone/test/settings/support/support_page_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:url_launcher/url_launcher.dart' as _i4;
import 'package:url_launcher_extended/src/url_launcher_extended.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UrlLauncherExtended].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherExtended extends _i1.Mock
    implements _i2.UrlLauncherExtended {
  @override
  _i3.Future<bool> launchUrl(
    Uri? url, {
    _i4.LaunchMode? mode = _i4.LaunchMode.platformDefault,
    _i4.WebViewConfiguration? webViewConfiguration =
        const _i4.WebViewConfiguration(),
    String? webOnlyWindowName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #launchUrl,
          [url],
          {
            #mode: mode,
            #webViewConfiguration: webViewConfiguration,
            #webOnlyWindowName: webOnlyWindowName,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> tryLaunchOrThrow(
    Uri? url, {
    _i4.LaunchMode? mode = _i4.LaunchMode.platformDefault,
    _i4.WebViewConfiguration? webViewConfiguration =
        const _i4.WebViewConfiguration(),
    String? webOnlyWindowName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #tryLaunchOrThrow,
          [url],
          {
            #mode: mode,
            #webViewConfiguration: webViewConfiguration,
            #webOnlyWindowName: webOnlyWindowName,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> canLaunchUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #canLaunchUrl,
          [url],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> tryLaunchMailOrThrow(
    String? address, {
    String? subject,
    String? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #tryLaunchMailOrThrow,
          [address],
          {
            #subject: subject,
            #body: body,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
