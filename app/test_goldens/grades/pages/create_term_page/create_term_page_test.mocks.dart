// Mocks generated by Mockito 5.4.4 from annotations
// in sharezone/test_goldens/grades/pages/create_term_page/create_term_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:analytics/src/analytics/analytics.dart' as _i12;
import 'package:crash_analytics/src/crash_analytics.dart' as _i9;
import 'package:fast_immutable_collections/fast_immutable_collections.dart'
    as _i3;
import 'package:flutter/foundation.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:rxdart/rxdart.dart' as _i2;
import 'package:sharezone/grades/grades_service/grades_service.dart' as _i4;
import 'package:sharezone/grades/models/grade_id.dart' as _i7;
import 'package:sharezone/grades/models/subject_id.dart' as _i6;
import 'package:sharezone/grades/models/term_id.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBehaviorSubject_0<T> extends _i1.SmartFake
    implements _i2.BehaviorSubject<T> {
  _FakeBehaviorSubject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIList_1<T> extends _i1.SmartFake implements _i3.IList<T> {
  _FakeIList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString([bool? prettyPrint]) => super.toString();
}

/// A class which mocks [GradesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGradesService extends _i1.Mock implements _i4.GradesService {
  @override
  _i2.BehaviorSubject<_i3.IList<_i4.TermResult>> get terms =>
      (super.noSuchMethod(
        Invocation.getter(#terms),
        returnValue: _FakeBehaviorSubject_0<_i3.IList<_i4.TermResult>>(
          this,
          Invocation.getter(#terms),
        ),
        returnValueForMissingStub:
            _FakeBehaviorSubject_0<_i3.IList<_i4.TermResult>>(
          this,
          Invocation.getter(#terms),
        ),
      ) as _i2.BehaviorSubject<_i3.IList<_i4.TermResult>>);
  @override
  void addTerm({
    required _i5.TermId? id,
    required String? name,
    required _i4.GradeTypeId? finalGradeType,
    required _i4.GradingSystem? gradingSystem,
    required bool? isActiveTerm,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addTerm,
          [],
          {
            #id: id,
            #name: name,
            #finalGradeType: finalGradeType,
            #gradingSystem: gradingSystem,
            #isActiveTerm: isActiveTerm,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void editTerm({
    required _i5.TermId? id,
    bool? isActiveTerm,
    String? name,
    _i4.GradeTypeId? finalGradeType,
    _i4.GradingSystem? gradingSystem,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #editTerm,
          [],
          {
            #id: id,
            #isActiveTerm: isActiveTerm,
            #name: name,
            #finalGradeType: finalGradeType,
            #gradingSystem: gradingSystem,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deleteTerm(_i5.TermId? id) => super.noSuchMethod(
        Invocation.method(
          #deleteTerm,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeSubjectWeightForTermGrade({
    required _i6.SubjectId? id,
    required _i5.TermId? termId,
    required _i4.Weight? weight,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeSubjectWeightForTermGrade,
          [],
          {
            #id: id,
            #termId: termId,
            #weight: weight,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeSubjectWeightTypeSettings({
    required _i6.SubjectId? id,
    required _i5.TermId? termId,
    required _i4.WeightType? perGradeType,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeSubjectWeightTypeSettings,
          [],
          {
            #id: id,
            #termId: termId,
            #perGradeType: perGradeType,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeGradeTypeWeightForSubject({
    required _i6.SubjectId? id,
    required _i5.TermId? termId,
    required _i4.GradeTypeId? gradeType,
    required _i4.Weight? weight,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeGradeTypeWeightForSubject,
          [],
          {
            #id: id,
            #termId: termId,
            #gradeType: gradeType,
            #weight: weight,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addGrade({
    required _i6.SubjectId? id,
    required _i5.TermId? termId,
    required _i4.Grade? value,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addGrade,
          [],
          {
            #id: id,
            #termId: termId,
            #value: value,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deleteGrade(_i7.GradeId? gradeId) => super.noSuchMethod(
        Invocation.method(
          #deleteGrade,
          [gradeId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeGradeWeight({
    required _i7.GradeId? id,
    required _i5.TermId? termId,
    required _i4.Weight? weight,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeGradeWeight,
          [],
          {
            #id: id,
            #termId: termId,
            #weight: weight,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeGradeTypeWeightForTerm({
    required _i5.TermId? termId,
    required _i4.GradeTypeId? gradeType,
    required _i4.Weight? weight,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeGradeTypeWeightForTerm,
          [],
          {
            #termId: termId,
            #gradeType: gradeType,
            #weight: weight,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeSubjectFinalGradeType({
    required _i6.SubjectId? id,
    required _i5.TermId? termId,
    required _i4.GradeTypeId? gradeType,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeSubjectFinalGradeType,
          [],
          {
            #id: id,
            #termId: termId,
            #gradeType: gradeType,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.PossibleGradesResult getPossibleGrades(
          _i4.GradingSystem? gradingSystem) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPossibleGrades,
          [gradingSystem],
        ),
        returnValue: _i8.dummyValue<_i4.PossibleGradesResult>(
          this,
          Invocation.method(
            #getPossibleGrades,
            [gradingSystem],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i4.PossibleGradesResult>(
          this,
          Invocation.method(
            #getPossibleGrades,
            [gradingSystem],
          ),
        ),
      ) as _i4.PossibleGradesResult);
  @override
  _i3.IList<_i4.GradeType> getPossibleGradeTypes() => (super.noSuchMethod(
        Invocation.method(
          #getPossibleGradeTypes,
          [],
        ),
        returnValue: _FakeIList_1<_i4.GradeType>(
          this,
          Invocation.method(
            #getPossibleGradeTypes,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeIList_1<_i4.GradeType>(
          this,
          Invocation.method(
            #getPossibleGradeTypes,
            [],
          ),
        ),
      ) as _i3.IList<_i4.GradeType>);
  @override
  void addCustomGradeType(_i4.GradeType? gradeType) => super.noSuchMethod(
        Invocation.method(
          #addCustomGradeType,
          [gradeType],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addSubject(_i4.Subject? subject) => super.noSuchMethod(
        Invocation.method(
          #addSubject,
          [subject],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.IList<_i4.Subject> getSubjects() => (super.noSuchMethod(
        Invocation.method(
          #getSubjects,
          [],
        ),
        returnValue: _FakeIList_1<_i4.Subject>(
          this,
          Invocation.method(
            #getSubjects,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeIList_1<_i4.Subject>(
          this,
          Invocation.method(
            #getSubjects,
            [],
          ),
        ),
      ) as _i3.IList<_i4.Subject>);
  @override
  _i4.Subject? getSubject(_i6.SubjectId? id) => (super.noSuchMethod(
        Invocation.method(
          #getSubject,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i4.Subject?);
}

/// A class which mocks [CrashAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashAnalytics extends _i1.Mock implements _i9.CrashAnalytics {
  @override
  set enableInDevMode(bool? _enableInDevMode) => super.noSuchMethod(
        Invocation.setter(
          #enableInDevMode,
          _enableInDevMode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void crash() => super.noSuchMethod(
        Invocation.method(
          #crash,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> recordFlutterError(_i11.FlutterErrorDetails? details) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterError,
          [details],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {#fatal: fatal},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  void log(String? msg) => super.noSuchMethod(
        Invocation.method(
          #log,
          [msg],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> setCustomKey(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<void> setUserIdentifier(String? identifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserIdentifier,
          [identifier],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<void> setCrashAnalyticsEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCrashAnalyticsEnabled,
          [enabled],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [Analytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalytics extends _i1.Mock implements _i12.Analytics {
  @override
  void log(_i12.AnalyticsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #log,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAnalyticsCollectionEnabled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setAnalyticsCollectionEnabled,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> logSignUp({required String? signUpMethod}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {#signUpMethod: signUpMethod},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<void> setCurrentScreen({required String? screenName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [],
          {#screenName: screenName},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  _i10.Future<void> setUserProperty({
    required String? name,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperty,
          [],
          {
            #name: name,
            #value: value,
          },
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}
