# Copyright (c) 2022 Sharezone UG (haftungsbeschränkt)
# Licensed under the EUPL-1.2-or-later.
#
# You may obtain a copy of the Licence at:
# https://joinup.ec.europa.eu/software/page/eupl
#
# SPDX-License-Identifier: EUPL-1.2

# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on pull request events
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CI_CD_DART_SCRIPTS_PACKAGE_PATH: "tools/sz_repo_cli/"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  analyze:
    runs-on: ubuntu-latest
    # In draft PRs we might use TODOs temporarily.
    # In this case the analyze pipeline would fail, thus we won't run it.
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v2

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Activate sz_repo_cli package
        run: pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(realpath ./bin) >> $GITHUB_PATH
      
      - name: Run code analysis via "sz analyze" (formatting, issues, spacing ...)
        run: sz analyze --max-concurrent-packages 3 --package-timeout-minutes 15

  check-files-licence-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'
      - run: go install github.com/google/addlicense@latest 
      - run: addlicense -check -c "Sharezone UG (haftungsbeschränkt)" -f header_template.txt -ignore "**/GeneratedPluginRegistrant.swift" . 

  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Activate sz_repo_cli package
        run: pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(pwd)/bin >> $GITHUB_PATH
      
      - name: Run tests via "sz test"
        run: sz test -v

  android-integration-test:
    # Is recommended to run job with macOS to take advantage of hardware
    # acceleration support provided by HAXM.
    runs-on: macos-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        api-level: [28, 31]
        # The package requires the PlayStore on the device.
        target: [playstore]
        arch: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@main
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
      
      - name: Run integration tests
        uses: reactivecircus/android-emulator-runner@v2
        env:
          USER_1_EMAIL: ${{ secrets.INTEGRATION_TEST_USER_1_EMAIL }}
          USER_1_PASSWORD: ${{ secrets.INTEGRATION_TEST_USER_1_PASSWORD }}
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          profile: pixel_3a
          emulator-options: -no-snapshot -no-window -no-boot-anim -camera-back virtualscene -camera-front emulated
          working-directory: ./app
          # We can not use a multiline command because the
          # "android-emulator-runner" doesn't support it. It just takes every
          # line as separate command.
          script: flutter test integration_test --flavor dev --dart-define USER_1_EMAIL=$USER_1_EMAIL --dart-define USER_1_PASSWORD=$USER_1_PASSWORD
  
  # We are building for every PR a web preview, which will be deployed to
  # Firebase Hosting. The link to the website will posted as comment (like:
  # https://github.com/SharezoneApp/sharezone-app/pull/119#issuecomment-1030012299).
  #
  # The previews are helping reviewer and other users to quickly view the
  # changes in a compiled version.
  #
  # A link to a preview expires after 7 days.
  #
  # Required steps to set this up:
  # 1. Run "firebase init hosting:github"
  # 2. Enable "Firebase Hosting API" in Google Cloud project
  # 3. Write GitHub action job
  # 4. Adjust website restrictions for Firebase Key "Sharezone Web Key".
  web-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Build web app
        working-directory: app
        run: flutter build web --release

      - name: Deploy to Firebase Hosting (sharezone-debug)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_SHAREZONE_DEBUG }}'
          projectId: sharezone-debug
          entryPoint: "./app"
          expires: '7d'
          target: 'test-web-app'
