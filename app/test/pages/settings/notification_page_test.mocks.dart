// Mocks generated by Mockito 5.4.4 from annotations
// in sharezone/test/pages/settings/notification_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:cloud_functions/cloud_functions.dart' as _i4;
import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sharezone/notifications/notifications_bloc.dart' as _i3;
import 'package:sharezone/notifications/notifications_bloc_factory.dart' as _i6;
import 'package:sharezone/sharezone_plus/subscription_service/subscription_service.dart'
    as _i7;
import 'package:user/user.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationsBloc_1 extends _i1.SmartFake
    implements _i3.NotificationsBloc {
  _FakeNotificationsBloc_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFunctions_2 extends _i1.SmartFake
    implements _i4.FirebaseFunctions {
  _FakeFirebaseFunctions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationsBloc extends _i1.Mock implements _i3.NotificationsBloc {
  @override
  _i2.StreamSubscription<dynamic> get subscription => (super.noSuchMethod(
        Invocation.getter(#subscription),
        returnValue: _FakeStreamSubscription_0<dynamic>(
          this,
          Invocation.getter(#subscription),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_0<dynamic>(
          this,
          Invocation.getter(#subscription),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  set subscription(_i2.StreamSubscription<dynamic>? _subscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #subscription,
          _subscription,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Stream<bool> get notificationsForHomeworks => (super.noSuchMethod(
        Invocation.getter(#notificationsForHomeworks),
        returnValue: _i2.Stream<bool>.empty(),
        returnValueForMissingStub: _i2.Stream<bool>.empty(),
      ) as _i2.Stream<bool>);
  @override
  _i2.Stream<bool> get notificationsForBlackboard => (super.noSuchMethod(
        Invocation.getter(#notificationsForBlackboard),
        returnValue: _i2.Stream<bool>.empty(),
        returnValueForMissingStub: _i2.Stream<bool>.empty(),
      ) as _i2.Stream<bool>);
  @override
  _i2.Stream<bool> get notificationsForComments => (super.noSuchMethod(
        Invocation.getter(#notificationsForComments),
        returnValue: _i2.Stream<bool>.empty(),
        returnValueForMissingStub: _i2.Stream<bool>.empty(),
      ) as _i2.Stream<bool>);
  @override
  dynamic Function(bool) get changeNotificationsForHomeworks =>
      (super.noSuchMethod(
        Invocation.getter(#changeNotificationsForHomeworks),
        returnValue: (bool __p0) => null,
        returnValueForMissingStub: (bool __p0) => null,
      ) as dynamic Function(bool));
  @override
  dynamic Function(bool) get changeNotificationsForBlackboard =>
      (super.noSuchMethod(
        Invocation.getter(#changeNotificationsForBlackboard),
        returnValue: (bool __p0) => null,
        returnValueForMissingStub: (bool __p0) => null,
      ) as dynamic Function(bool));
  @override
  dynamic Function(bool) get changeNotificationsForComments =>
      (super.noSuchMethod(
        Invocation.getter(#changeNotificationsForComments),
        returnValue: (bool __p0) => null,
        returnValueForMissingStub: (bool __p0) => null,
      ) as dynamic Function(bool));
  @override
  _i2.Stream<_i5.TimeOfDay?> get notificationsTimeForHomeworks =>
      (super.noSuchMethod(
        Invocation.getter(#notificationsTimeForHomeworks),
        returnValue: _i2.Stream<_i5.TimeOfDay?>.empty(),
        returnValueForMissingStub: _i2.Stream<_i5.TimeOfDay?>.empty(),
      ) as _i2.Stream<_i5.TimeOfDay?>);
  @override
  dynamic Function(_i5.TimeOfDay) get changeNotificationsTimeForHomeworks =>
      (super.noSuchMethod(
        Invocation.getter(#changeNotificationsTimeForHomeworks),
        returnValue: (_i5.TimeOfDay __p0) => null,
        returnValueForMissingStub: (_i5.TimeOfDay __p0) => null,
      ) as dynamic Function(_i5.TimeOfDay));
  @override
  List<_i5.TimeOfDay> getTimeForHomeworkNotifications() => (super.noSuchMethod(
        Invocation.method(
          #getTimeForHomeworkNotifications,
          [],
        ),
        returnValue: <_i5.TimeOfDay>[],
        returnValueForMissingStub: <_i5.TimeOfDay>[],
      ) as List<_i5.TimeOfDay>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NotificationsBlocFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationsBlocFactory extends _i1.Mock
    implements _i6.NotificationsBlocFactory {
  @override
  _i3.NotificationsBloc create() => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
        ),
        returnValue: _FakeNotificationsBloc_1(
          this,
          Invocation.method(
            #create,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNotificationsBloc_1(
          this,
          Invocation.method(
            #create,
            [],
          ),
        ),
      ) as _i3.NotificationsBloc);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionService extends _i1.Mock
    implements _i7.SubscriptionService {
  @override
  _i2.Stream<_i8.AppUser?> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i2.Stream<_i8.AppUser?>.empty(),
        returnValueForMissingStub: _i2.Stream<_i8.AppUser?>.empty(),
      ) as _i2.Stream<_i8.AppUser?>);
  @override
  _i4.FirebaseFunctions get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFirebaseFunctions_2(
          this,
          Invocation.getter(#functions),
        ),
        returnValueForMissingStub: _FakeFirebaseFunctions_2(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i4.FirebaseFunctions);
  @override
  _i2.Stream<_i8.SharezonePlusStatus?> get sharezonePlusStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#sharezonePlusStatusStream),
        returnValue: _i2.Stream<_i8.SharezonePlusStatus?>.empty(),
        returnValueForMissingStub: _i2.Stream<_i8.SharezonePlusStatus?>.empty(),
      ) as _i2.Stream<_i8.SharezonePlusStatus?>);
  @override
  set sharezonePlusStatusStream(
          _i2.Stream<_i8.SharezonePlusStatus?>? _sharezonePlusStatusStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #sharezonePlusStatusStream,
          _sharezonePlusStatusStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSubscriptionActive([_i8.AppUser? appUser]) => (super.noSuchMethod(
        Invocation.method(
          #isSubscriptionActive,
          [appUser],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Stream<bool> isSubscriptionActiveStream() => (super.noSuchMethod(
        Invocation.method(
          #isSubscriptionActiveStream,
          [],
        ),
        returnValue: _i2.Stream<bool>.empty(),
        returnValueForMissingStub: _i2.Stream<bool>.empty(),
      ) as _i2.Stream<bool>);
  @override
  bool hasFeatureUnlocked(_i7.SharezonePlusFeature? feature) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasFeatureUnlocked,
          [feature],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Stream<bool> hasFeatureUnlockedStream(
          _i7.SharezonePlusFeature? feature) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasFeatureUnlockedStream,
          [feature],
        ),
        returnValue: _i2.Stream<bool>.empty(),
        returnValueForMissingStub: _i2.Stream<bool>.empty(),
      ) as _i2.Stream<bool>);
  @override
  _i2.Future<void> cancelStripeSubscription() => (super.noSuchMethod(
        Invocation.method(
          #cancelStripeSubscription,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<bool> showLetParentsBuyButton() => (super.noSuchMethod(
        Invocation.method(
          #showLetParentsBuyButton,
          [],
        ),
        returnValue: _i2.Future<bool>.value(false),
        returnValueForMissingStub: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  _i2.Future<String?> getPlusWebsiteBuyToken() => (super.noSuchMethod(
        Invocation.method(
          #getPlusWebsiteBuyToken,
          [],
        ),
        returnValue: _i2.Future<String?>.value(),
        returnValueForMissingStub: _i2.Future<String?>.value(),
      ) as _i2.Future<String?>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
