// Mocks generated by Mockito 5.4.2 from annotations
// in sharezone/test/holidays/holiday_bloc_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:holidays/src/api/holiday.dart' as _i5;
import 'package:holidays/src/holiday_api.dart' as _i2;
import 'package:holidays/src/holiday_cache.dart' as _i7;
import 'package:holidays/src/state.dart' as _i6;
import 'package:key_value_store/key_value_store.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHolidayApiClient_0 extends _i1.SmartFake
    implements _i2.HolidayApiClient {
  _FakeHolidayApiClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyValueStore_2 extends _i1.SmartFake implements _i3.KeyValueStore {
  _FakeKeyValueStore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HolidayApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockHolidayApi extends _i1.Mock implements _i2.HolidayApi {
  @override
  _i2.HolidayApiClient get apiClient => (super.noSuchMethod(
        Invocation.getter(#apiClient),
        returnValue: _FakeHolidayApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
        returnValueForMissingStub: _FakeHolidayApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
      ) as _i2.HolidayApiClient);
  @override
  bool get returnPassedHolidays => (super.noSuchMethod(
        Invocation.getter(#returnPassedHolidays),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  DateTime Function() get getCurrentTime => (super.noSuchMethod(
        Invocation.getter(#getCurrentTime),
        returnValue: () => _FakeDateTime_1(
          this,
          Invocation.getter(#getCurrentTime),
        ),
        returnValueForMissingStub: () => _FakeDateTime_1(
          this,
          Invocation.getter(#getCurrentTime),
        ),
      ) as DateTime Function());
  @override
  set getCurrentTime(DateTime Function()? _getCurrentTime) =>
      super.noSuchMethod(
        Invocation.setter(
          #getCurrentTime,
          _getCurrentTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<List<_i5.Holiday>> load(
    int? yearsInAdvance,
    _i6.State? state, [
    bool? returnPassedHolidays = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [
            yearsInAdvance,
            state,
            returnPassedHolidays,
          ],
        ),
        returnValue: _i4.Future<List<_i5.Holiday>>.value(<_i5.Holiday>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Holiday>>.value(<_i5.Holiday>[]),
      ) as _i4.Future<List<_i5.Holiday>>);
  @override
  void removePassedHolidays(List<_i5.Holiday>? holidayList) =>
      super.noSuchMethod(
        Invocation.method(
          #removePassedHolidays,
          [holidayList],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HolidayCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockHolidayCache extends _i1.Mock implements _i7.HolidayCache {
  @override
  _i3.KeyValueStore get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: _FakeKeyValueStore_2(
          this,
          Invocation.getter(#cache),
        ),
        returnValueForMissingStub: _FakeKeyValueStore_2(
          this,
          Invocation.getter(#cache),
        ),
      ) as _i3.KeyValueStore);
  @override
  Duration get maxValidDurationTillLastSaved => (super.noSuchMethod(
        Invocation.getter(#maxValidDurationTillLastSaved),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#maxValidDurationTillLastSaved),
        ),
        returnValueForMissingStub: _FakeDuration_3(
          this,
          Invocation.getter(#maxValidDurationTillLastSaved),
        ),
      ) as Duration);
  @override
  set getCurrentTime(_i7.SavingDateTimeFunction? _getCurrentTime) =>
      super.noSuchMethod(
        Invocation.setter(
          #getCurrentTime,
          _getCurrentTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.CacheResponse? load(_i6.State? state) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [state],
        ),
        returnValueForMissingStub: null,
      ) as _i7.CacheResponse?);
  @override
  List<_i5.Holiday> removePassedHolidays(List<_i5.Holiday>? holidays) =>
      (super.noSuchMethod(
        Invocation.method(
          #removePassedHolidays,
          [holidays],
        ),
        returnValue: <_i5.Holiday>[],
        returnValueForMissingStub: <_i5.Holiday>[],
      ) as List<_i5.Holiday>);
  @override
  _i4.Future<void> save(
    List<_i5.Holiday?>? holidays,
    _i6.State? state,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            holidays,
            state,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  bool isCacheDataValid(
    _i5.HolidayCacheData? cacheData,
    Duration? maxDurationTillLastSaved,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCacheDataValid,
          [
            cacheData,
            maxDurationTillLastSaved,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
