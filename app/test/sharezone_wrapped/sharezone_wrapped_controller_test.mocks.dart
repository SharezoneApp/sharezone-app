// Mocks generated by Mockito 5.4.4 from annotations
// in sharezone/test/sharezone_wrapped/sharezone_wrapped_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:analytics/src/analytics/analytics.dart' as _i12;
import 'package:clock/clock.dart' as _i5;
import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:common_domain_models/common_domain_models.dart' as _i4;
import 'package:crash_analytics/src/crash_analytics.dart' as _i10;
import 'package:flutter/foundation.dart' as _i11;
import 'package:group_domain_models/group_domain_models.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sharezone/sharezone_wrapped/sharezone_wrapped_repository.dart'
    as _i6;
import 'package:sharezone/timetable/src/models/lesson.dart' as _i8;
import 'package:sharezone/util/api/connections_gateway.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionsGateway_1 extends _i1.SmartFake
    implements _i3.ConnectionsGateway {
  _FakeConnectionsGateway_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserId_2 extends _i1.SmartFake implements _i4.UserId {
  _FakeUserId_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClock_3 extends _i1.SmartFake implements _i5.Clock {
  _FakeClock_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SharezoneWrappedRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharezoneWrappedRepository extends _i1.Mock
    implements _i6.SharezoneWrappedRepository {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i3.ConnectionsGateway get connectionsGateway => (super.noSuchMethod(
        Invocation.getter(#connectionsGateway),
        returnValue: _FakeConnectionsGateway_1(
          this,
          Invocation.getter(#connectionsGateway),
        ),
        returnValueForMissingStub: _FakeConnectionsGateway_1(
          this,
          Invocation.getter(#connectionsGateway),
        ),
      ) as _i3.ConnectionsGateway);

  @override
  _i4.UserId get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: _FakeUserId_2(
          this,
          Invocation.getter(#userId),
        ),
        returnValueForMissingStub: _FakeUserId_2(
          this,
          Invocation.getter(#userId),
        ),
      ) as _i4.UserId);

  @override
  _i5.Clock get clock => (super.noSuchMethod(
        Invocation.getter(#clock),
        returnValue: _FakeClock_3(
          this,
          Invocation.getter(#clock),
        ),
        returnValueForMissingStub: _FakeClock_3(
          this,
          Invocation.getter(#clock),
        ),
      ) as _i5.Clock);

  @override
  _i7.Future<int?> getTotalAmountOfHomeworks() => (super.noSuchMethod(
        Invocation.method(
          #getTotalAmountOfHomeworks,
          [],
        ),
        returnValue: _i7.Future<int?>.value(),
        returnValueForMissingStub: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<int?> getAmountOfHomeworksFor({required _i4.CourseId? courseId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAmountOfHomeworksFor,
          [],
          {#courseId: courseId},
        ),
        returnValue: _i7.Future<int?>.value(),
        returnValueForMissingStub: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<int?> getTotalAmountOfExams() => (super.noSuchMethod(
        Invocation.method(
          #getTotalAmountOfExams,
          [],
        ),
        returnValue: _i7.Future<int?>.value(),
        returnValueForMissingStub: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<int?> getAmountOfExamsFor({required _i4.CourseId? courseId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAmountOfExamsFor,
          [],
          {#courseId: courseId},
        ),
        returnValue: _i7.Future<int?>.value(),
        returnValueForMissingStub: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<List<_i8.Lesson>> getLessons() => (super.noSuchMethod(
        Invocation.method(
          #getLessons,
          [],
        ),
        returnValue: _i7.Future<List<_i8.Lesson>>.value(<_i8.Lesson>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i8.Lesson>>.value(<_i8.Lesson>[]),
      ) as _i7.Future<List<_i8.Lesson>>);

  @override
  List<_i9.Course> getCourses() => (super.noSuchMethod(
        Invocation.method(
          #getCourses,
          [],
        ),
        returnValue: <_i9.Course>[],
        returnValueForMissingStub: <_i9.Course>[],
      ) as List<_i9.Course>);
}

/// A class which mocks [CrashAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashAnalytics extends _i1.Mock implements _i10.CrashAnalytics {
  @override
  set enableInDevMode(bool? _enableInDevMode) => super.noSuchMethod(
        Invocation.setter(
          #enableInDevMode,
          _enableInDevMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void crash() => super.noSuchMethod(
        Invocation.method(
          #crash,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> recordFlutterError(_i11.FlutterErrorDetails? details) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterError,
          [details],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {#fatal: fatal},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void log(String? msg) => super.noSuchMethod(
        Invocation.method(
          #log,
          [msg],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> setCustomKey(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setUserIdentifier(String? identifier) => (super.noSuchMethod(
        Invocation.method(
          #setUserIdentifier,
          [identifier],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setCrashAnalyticsEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCrashAnalyticsEnabled,
          [enabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [Analytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalytics extends _i1.Mock implements _i12.Analytics {
  @override
  void log(_i12.AnalyticsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #log,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAnalyticsCollectionEnabled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setAnalyticsCollectionEnabled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> logSignUp({required String? signUpMethod}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {#signUpMethod: signUpMethod},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setCurrentScreen({required String? screenName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [],
          {#screenName: screenName},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setUserProperty({
    required String? name,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperty,
          [],
          {
            #name: name,
            #value: value,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
