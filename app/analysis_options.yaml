# Copyright (c) 2022 Sharezone UG (haftungsbeschr√§nkt)
# Licensed under the EUPL-1.2-or-later.
#
# You may obtain a copy of the Licence at:
# https://joinup.ec.europa.eu/software/page/eupl
#
# SPDX-License-Identifier: EUPL-1.2

analyzer:
  strong-mode:
    implicit-casts: false
  errors:
    # treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # treat missing returns as a warning (not a hint)
    missing_return: warning
    # Disallow TODOs
    todo: warning
    # treat unrealated == as a warning (not a hint)
    unrelated_type_equality_checks: warning
  exclude:
    - 'lib/generated**'
    - 'lib/i18n/l10n/**'
    - '**.g.dart'

linter:
  rules:
    - always_declare_return_types
    # - always_put_required_named_parameters_first - todo
    - always_require_non_null_named_parameters
    - annotate_overrides
    # - avoid_classes_with_only_static_members - should be activated, but I don't know how to handle our cases
    #- avoid_annotating_with_dynamic
    # - avoid_as - Could be used, but is often too much boilerplate in BlocProviders
    - avoid_bool_literals_in_conditional_expressions
    # - avoid_catches_without_on_clauses - should be on
    - avoid_catching_errors
    # - avoid_classes_with_only_static_members - should be on, but not sure how to handle our cases
    - avoid_double_and_int_checks
    - avoid_empty_else
    - avoid_field_initializers_in_const_classes
    # - avoid_function_literals_in_foreach_calls - todo, should be on
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    # - avoid_positional_boolean_parameters - todo, should be on
    - avoid_private_typedef_functions
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null
    - avoid_returning_null_for_void
    - avoid_setters_without_getters
    - avoid_single_cascade_in_expression_statements
    - avoid_slow_async_io
    - avoid_types_as_parameter_names
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    # - cascade_invocations todo
    - close_sinks
    # - comment_references - unsure, can be on
    - constant_identifier_names
    - control_flow_in_finally
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    # - flutter_style_todos -should propably use?
    - hash_and_equals
    - implementation_imports
    - iterable_contains_unrelated_type
    - library_names
    - library_prefixes
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - non_constant_identifier_names
    - null_closures
    - overridden_fields
    - only_throw_errors
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_collection_literals
    - prefer_conditional_assignment
    # - prefer_const_constructors - should be on, need much work though
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_equal_for_default_values
    - prefer_final_fields
    # - prefer_final_locals - TODO, stupid click work
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_initializing_formals
    # - prefer_int_literals - todo
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
    # - prefer_mixin - todo
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - recursive_getters
    - slash_for_doc_comments
    # - sort_constructors_first - todo
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    # - type_annotate_public_apis - not sure
    - type_init_formals
    # - unawaited_futures	-todo !
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters
    # - unnecessary_lambdas	has false positives: https://github.com/dart-lang/linter/issues/498
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_this
    - unrelated_type_equality_checks
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_to_and_as_if_applicable	
    - valid_regexps
    - void_checks	
