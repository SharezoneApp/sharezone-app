# Copyright (c) 2022 Sharezone UG (haftungsbeschränkt)
# Licensed under the EUPL-1.2-or-later.
#
# You may obtain a copy of the Licence at:
# https://joinup.ec.europa.eu/software/page/eupl
#
# SPDX-License-Identifier: EUPL-1.2

# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on pull request events
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CI_CD_DART_SCRIPTS_PACKAGE_PATH: "tools/sz_repo_cli/"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow applies labels to pull requests based on the paths that are
  # modified in the pull request.
  #
  # Edit `.github/labeler.yml` to configure labels.
  #
  # For more information, see: https://github.com/actions/labeler
  label-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - name: Label PR
      uses: actions/labeler@v3
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"

  analyze:
    runs-on: ubuntu-latest
    # In draft PRs we might use TODOs temporarily.
    # In this case the analyze pipeline would fail, thus we won't run it.
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v2

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Activate sz_repo_cli package
        run: pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(realpath ./bin) >> $GITHUB_PATH
      
      - name: Run code analysis via "sz analyze" (formatting, issues, spacing ...)
        run: sz analyze --max-concurrent-packages 3 --package-timeout-minutes 15

  check-files-licence-headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'
      - run: go install github.com/google/addlicense@latest 
      - run: addlicense -check -c "Sharezone UG (haftungsbeschränkt)" -f header_template.txt -ignore "**/GeneratedPluginRegistrant.swift" . 

  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Activate sz_repo_cli package
        run: pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(pwd)/bin >> $GITHUB_PATH
      
      - name: Run tests via "sz test"
        run: sz test -v
      
      # Uploads the results of failed tests as .zip to GitHub.
      #
      # You can find the file under the "Summary" Tab on GitHub when all jobs of
      # this workflows finished.
      - name: Upload failed golden tests
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failed-golden-tests
          # When a golden test failed, are the results stored in the "failures"
          # folder. The failures can be at several places, like in the app
          # folder and in different packages.
          path: "**/failures/*.png"
          # We ignore it when no files could be found because the test command
          # could also be failed because of an unit test. In this case there
          # would be no failed golden test to upload.
          if-no-files-found: ignore   
  
  ios-integration-test:
    runs-on: macos-latest
    if: ${{ github.event.pull_request.draft == false }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - uses: futureware-tech/simulator-action@v1
        id: simulator
        with:
          model: "iPhone 13"
      
      - name: Run integration tests
        working-directory: app
        env:
          USER_1_EMAIL: ${{ secrets.INTEGRATION_TEST_USER_1_EMAIL }}
          USER_1_PASSWORD: ${{ secrets.INTEGRATION_TEST_USER_1_PASSWORD }}
          SIMULATOR_UDID: ${{ steps.simulator.outputs.udid }}
        # We use the `flutter drive` instead of the `flutter test` command
        # because the test command times out after 12 minutes. But building the
        # app takes more than 12 minutes... It seems so that there is no way to
        # set the timeout (the --timeout argument has not effect). Tracking
        # issue: https://github.com/flutter/flutter/issues/105913
        run: |
          flutter drive \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/app_test.dart \
            --flavor dev \
            --dart-define \
            USER_1_EMAIL=$USER_1_EMAIL \
            --dart-define \
            USER_1_PASSWORD=$USER_1_PASSWORD \
            -d $SIMULATOR_UDID

  # We are building for every PR a web preview, which will be deployed to
  # Firebase Hosting. The link to the website will posted as comment (like:
  # https://github.com/SharezoneApp/sharezone-app/pull/119#issuecomment-1030012299).
  #
  # The previews are helping reviewer and other users to quickly view the
  # changes in a compiled version.
  #
  # A link to a preview expires after 7 days.
  #
  # Required steps to set this up:
  # 1. Run "firebase init hosting:github"
  # 2. Enable "Firebase Hosting API" in Google Cloud project
  # 3. Write GitHub action job
  # 4. Adjust website restrictions for Firebase Key "Sharezone Web Key".
  web-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Build web app
        working-directory: app
        run: flutter build web --release

      - name: Deploy to Firebase Hosting (sharezone-debug)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_SHAREZONE_DEBUG }}'
          projectId: sharezone-debug
          entryPoint: "./app"
          expires: '7d'
          target: 'test-web-app'
