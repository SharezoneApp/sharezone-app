// Mocks generated by Mockito 5.4.4 from annotations
// in sharezone/test/feedback/feedback_history_page_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:analytics/analytics.dart' as _i2;
import 'package:common_domain_models/common_domain_models.dart' as _i8;
import 'package:crash_analytics/src/crash_analytics.dart' as _i9;
import 'package:feedback_shared_implementation/src/api/feedback_api.dart'
    as _i3;
import 'package:feedback_shared_implementation/src/models/feedback_chat_message.dart'
    as _i6;
import 'package:feedback_shared_implementation/src/models/feedback_id.dart'
    as _i7;
import 'package:feedback_shared_implementation/src/models/user_feedback.dart'
    as _i5;
import 'package:flutter/foundation.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sharezone/feedback/history/feedback_history_page_analytics.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAnalytics_0 extends _i1.SmartFake implements _i2.Analytics {
  _FakeAnalytics_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FeedbackApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedbackApi extends _i1.Mock implements _i3.FeedbackApi {
  @override
  _i4.Future<void> sendFeedback(_i5.UserFeedback? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendFeedback,
          [feedback],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Stream<List<_i5.UserFeedback>> streamFeedbacks(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamFeedbacks,
          [userId],
        ),
        returnValue: _i4.Stream<List<_i5.UserFeedback>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i5.UserFeedback>>.empty(),
      ) as _i4.Stream<List<_i5.UserFeedback>>);
  @override
  _i4.Stream<List<_i6.FeedbackChatMessage>> streamChatMessages(
          _i7.FeedbackId? feedbackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamChatMessages,
          [feedbackId],
        ),
        returnValue: _i4.Stream<List<_i6.FeedbackChatMessage>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i6.FeedbackChatMessage>>.empty(),
      ) as _i4.Stream<List<_i6.FeedbackChatMessage>>);
  @override
  _i4.Stream<_i5.UserFeedback> streamFeedback(_i7.FeedbackId? feedbackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamFeedback,
          [feedbackId],
        ),
        returnValue: _i4.Stream<_i5.UserFeedback>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.UserFeedback>.empty(),
      ) as _i4.Stream<_i5.UserFeedback>);
  @override
  _i4.Stream<bool> streamHasUnreadFeedbackMessages(_i8.UserId? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamHasUnreadFeedbackMessages,
          [userId],
        ),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);
  @override
  _i4.Future<List<_i5.UserFeedback>> getFeedbacksForSupportTeam({
    DateTime? startAfter,
    int? limit = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeedbacksForSupportTeam,
          [],
          {
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i5.UserFeedback>>.value(<_i5.UserFeedback>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.UserFeedback>>.value(<_i5.UserFeedback>[]),
      ) as _i4.Future<List<_i5.UserFeedback>>);
  @override
  void markMessageAsRead(
    _i7.FeedbackId? feedbackId,
    _i8.UserId? userId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [
            feedbackId,
            userId,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void sendResponse({
    required _i7.FeedbackId? feedbackId,
    required _i8.UserId? userId,
    required String? message,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sendResponse,
          [],
          {
            #feedbackId: feedbackId,
            #userId: userId,
            #message: message,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CrashAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashAnalytics extends _i1.Mock implements _i9.CrashAnalytics {
  @override
  set enableInDevMode(bool? _enableInDevMode) => super.noSuchMethod(
        Invocation.setter(
          #enableInDevMode,
          _enableInDevMode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void crash() => super.noSuchMethod(
        Invocation.method(
          #crash,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> recordFlutterError(_i10.FlutterErrorDetails? details) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterError,
          [details],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {#fatal: fatal},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  void log(String? msg) => super.noSuchMethod(
        Invocation.method(
          #log,
          [msg],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> setCustomKey(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setUserIdentifier(String? identifier) => (super.noSuchMethod(
        Invocation.method(
          #setUserIdentifier,
          [identifier],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setCrashAnalyticsEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCrashAnalyticsEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [FeedbackHistoryPageAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedbackHistoryPageAnalytics extends _i1.Mock
    implements _i11.FeedbackHistoryPageAnalytics {
  @override
  _i2.Analytics get analytics => (super.noSuchMethod(
        Invocation.getter(#analytics),
        returnValue: _FakeAnalytics_0(
          this,
          Invocation.getter(#analytics),
        ),
        returnValueForMissingStub: _FakeAnalytics_0(
          this,
          Invocation.getter(#analytics),
        ),
      ) as _i2.Analytics);
  @override
  void logOpenedPage() => super.noSuchMethod(
        Invocation.method(
          #logOpenedPage,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
