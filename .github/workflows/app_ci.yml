# Copyright (c) 2022 Sharezone UG (haftungsbeschrÃ¤nkt)
# Licensed under the EUPL-1.2-or-later.
#
# You may obtain a copy of the Licence at:
# https://joinup.ec.europa.eu/software/page/eupl
#
# SPDX-License-Identifier: EUPL-1.2

# This workflow handles the CI for the app. Therefore, it's only triggered on
# pull requests that make changes to the app.

name: app-ci

on:
  merge_group:
    types:
      - checks_requested
  # Triggers the workflow on pull request events
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      # It's important to trigger this workflow again when the pull is changing
      # from a draft pull request to a ready for review pull request.
      #
      # Some jobs are skipped when the pull request is a draft. Therefore, we
      # need to trigger these jobs again when the pull request is changing to
      # ready for review.
      - ready_for_review
    paths:
      # When you add a new path, make sure to also add the path to the
      # "paths-ignore" section in the "app_fallback_ci.yml" file.
      # 
      # When we change the Flutter version, we need to trigger this workflow.
      - ".fvm/fvm_config.json"
      # We only build and deploy a new version, when a user relevant files
      # changed.
      - "app/**"
      - "lib/**"
      # We trigger also this workflow, if this workflow is changed, so that new
      # changes will be applied.
      - ".github/workflows/app_ci.yml"
      # The following paths are excluded from the above paths. It's important to
      # list the paths at the end of the file, so that the exclude paths are
      # applied.
      #
      # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-including-and-excluding-paths.
      - "!**.md"
      - "!**.mdx"
      - "!**.gitignore"
      - "!**/firebase.json"
      - "!**/.firebaserc"

env:
  CI_CD_DART_SCRIPTS_PACKAGE_PATH: "tools/sz_repo_cli/"

# Set permissions to none.
#
# Using the broad default permissions is considered a bad security practice 
# and would cause alerts from our scanning tools.
permissions: {}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  analyze:
    runs-on: ubuntu-latest
    # In draft PRs we might use TODOs temporarily.
    # In this case the analyze pipeline would fail, thus we won't run it.
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v3

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # Use format expected by FVM.
          # Else this won't be recognized as an installed version when setting
          # '.../flutter' as the FVM Flutter version cache folder.
          cache-path: '${{ runner.tool_cache }}/flutter/:version:'

      - name: Install FVM
        run: |
          flutter pub global activate fvm
          fvm config --cache-path '${{ runner.tool_cache }}/flutter'

      - name: Activate sz_repo_cli package
        run: fvm flutter pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(realpath ./bin) >> $GITHUB_PATH
      
      - name: Run code analysis via "sz analyze" (formatting, issues, spacing ...)
        run: sz analyze --max-concurrent-packages 3 --package-timeout-minutes 15

  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # Use format expected by FVM.
          # Else this won't be recognized as an installed version when setting
          # '.../flutter' as the FVM Flutter version cache folder.
          cache-path: '${{ runner.tool_cache }}/flutter/:version:'

      - name: Install FVM
        run: |
          flutter pub global activate fvm
          fvm config --cache-path '${{ runner.tool_cache }}/flutter'

      - name: Activate sz_repo_cli package
        run: fvm flutter pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(pwd)/bin >> $GITHUB_PATH
      
      - name: Run tests via "sz test"
        run: sz test -c 4
      
      # Uploads the results of failed tests as .zip to GitHub.
      #
      # You can find the file under the "Summary" Tab on GitHub when all jobs of
      # this workflows finished.
      - name: Upload failed golden tests
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failed-golden-tests
          # When a golden test failed, are the results stored in the "failures"
          # folder. The failures can be at several places, like in the app
          # folder and in different packages.
          path: "**/failures/*.png"
          # We ignore it when no files could be found because the test command
          # could also be failed because of an unit test. In this case there
          # would be no failed golden test to upload.
          if-no-files-found: ignore
  
  android-integration-test:
    # Is recommended to run the job with a macOS machine to take advantage of
    # hardware acceleration support provided by HAXM. See more details in the
    # README.md of the Android emulator action:
    # https://github.com/ReactiveCircus/android-emulator-runner#usage
    runs-on: macos-latest
    if: ${{ github.event.pull_request.draft == false }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3

      # Java is needed for building the APK, see
      # https://github.com/marketplace/actions/flutter-action.
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@main
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      # Building the Android app as workaround for the timeout problem with
      # integration tests.
      #
      # We need to build the Android app first to hope that the build for the
      # integration test needs less than 12 minutes. Currently, it's not
      # possible to increase the timeout for integration tests:
      # https://github.com/flutter/flutter/issues/105913.
      #
      # Using `flutter drive` as workaround is not an option because it's super
      # flaky in terms of stability. With `flutter drive` ~ 30% the Android
      # Emulator have difficulties to start properly. 
      - name: Build Android App
        working-directory: ./app
        env:
          USER_1_EMAIL: ${{ secrets.INTEGRATION_TEST_USER_1_EMAIL }}
          USER_1_PASSWORD: ${{ secrets.INTEGRATION_TEST_USER_1_PASSWORD }}
        run: flutter build apk --target=integration_test/app_test.dart --flavor dev --dart-define USER_1_EMAIL=$USER_1_EMAIL --dart-define USER_1_PASSWORD=$USER_1_PASSWORD
      
      - name: Run integration tests
        uses: reactivecircus/android-emulator-runner@v2
        env:
          USER_1_EMAIL: ${{ secrets.INTEGRATION_TEST_USER_1_EMAIL }}
          USER_1_PASSWORD: ${{ secrets.INTEGRATION_TEST_USER_1_PASSWORD }}
        with:
          # When you are going to change something here (like a different
          # target, arch, profile, channel, etc.), please check if these
          # configurations are stable.
          #
          # You can do this by running this workflow multiple times. Use a
          # matrix to run multiple tests in parallel (matrix needs to be copied
          # to above the "with"):
          # strategy:
          #   fail-fast: false
          #   matrix:
          #     test1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
          #     test2: [1, 2, 3]
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Nexus 5X
          channel: canary
          # We use some emulator options for the following reasons:
          # * "-no-snapshot": Disables the quick boot feature. Therefore, the
          #   emulator does not load or save the emulator state. We want to have
          # * "-no-window": Disables the graphical windows, so no display is
          #   required.
          #   a fresh testing environment for every test run.
          # * "-no-boot-anim": Disables the boot animation for faster booting.
          # * "-camera-back virtualscene": Shows this virtual room when opening
          #   the back camera where you can walk. Default option for emulators
          #   created by Android Studio. We use this so we have the same
          #   environment locally as when using this action. Is needed when
          #   testing things with the camera. It's also possible to inject
          #   images into the virtual scene to test things like qr code scanner.
          # * "-camera-front": Shows this green monster when opening the front
          #   camera. Default option for emulators created by Android Studio. We
          #   use this so we have the same environment locally as when using
          #   this action. Is needed when testing things with camera.
          emulator-options: -no-snapshot -no-window -no-boot-anim -camera-back virtualscene -camera-front emulated
          working-directory: ./app
          # We can not use a multiline command because the
          # "android-emulator-runner" action doesn't support it. It just takes every
          # line as separate command.
          script: flutter test integration_test --flavor dev --dart-define USER_1_EMAIL=$USER_1_EMAIL --dart-define USER_1_PASSWORD=$USER_1_PASSWORD
  
  ios-integration-test:
    runs-on: macos-latest
    if: ${{ github.event.pull_request.draft == false }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # Use format expected by FVM.
          # Else this won't be recognized as an installed version when setting
          # '.../flutter' as the FVM Flutter version cache folder.
          cache-path: '${{ runner.tool_cache }}/flutter/:version:'

      - name: Install FVM
        run: |
          flutter pub global activate fvm
          fvm config --cache-path '${{ runner.tool_cache }}/flutter'

      - uses: futureware-tech/simulator-action@v1
        id: simulator
        with:
          model: "iPhone 13"
      
      - name: Run integration tests
        working-directory: app
        env:
          USER_1_EMAIL: ${{ secrets.INTEGRATION_TEST_USER_1_EMAIL }}
          USER_1_PASSWORD: ${{ secrets.INTEGRATION_TEST_USER_1_PASSWORD }}
          SIMULATOR_UDID: ${{ steps.simulator.outputs.udid }}
        # We use the `flutter drive` instead of the `flutter test` command
        # because the test command times out after 12 minutes. But building the
        # app takes more than 12 minutes... It seems so that there is no way to
        # set the timeout (the --timeout argument has not effect). Tracking
        # issue: https://github.com/flutter/flutter/issues/105913
        run: |
          fvm flutter drive \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/app_test.dart \
            --flavor dev \
            --dart-define=USER_1_EMAIL=$USER_1_EMAIL \
            --dart-define=USER_1_PASSWORD=$USER_1_PASSWORD \
            -d $SIMULATOR_UDID

  # We are building for every PR a web preview, which will be deployed to
  # Firebase Hosting. The link to the website will posted as comment (like:
  # https://github.com/SharezoneApp/sharezone-app/pull/119#issuecomment-1030012299).
  #
  # The previews are helping reviewer and other users to quickly view the
  # changes in a compiled version.
  #
  # A link to a preview expires after 7 days.
  #
  # Required steps to set this up:
  # 1. Run "firebase init hosting:github"
  # 2. Enable "Firebase Hosting API" in Google Cloud project
  # 3. Write GitHub action job
  # 4. Adjust website restrictions for Firebase Key "Sharezone Web Key".
  web-preview:
    # We only want to build the web app only for PRs.
    #
    # Otherwise this will be triggered inside a merge-queue.
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # for FirebaseExtended/action-hosting-deploy to comment on PRs
      checks: write # for FirebaseExtended/action-hosting-deploy to comment on PRs (without write permissions for checks the action doesn't post a comment to the PR, we don't know why)
    steps:
      - uses: actions/checkout@v3

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@v1

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # Use format expected by FVM.
          # Else this won't be recognized as an installed version when setting
          # '.../flutter' as the FVM Flutter version cache folder.
          cache-path: '${{ runner.tool_cache }}/flutter/:version:'

      - name: Install FVM
        run: |
          flutter pub global activate fvm
          fvm config --cache-path '${{ runner.tool_cache }}/flutter'

      - name: Build web app
        working-directory: app
        run: |
          fvm flutter build web \
            --release \
            --target=lib/main_dev.dart

      - name: Deploy to Firebase Hosting (sharezone-debug)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SHAREZONE_DEBUG }}
          projectId: sharezone-debug
          entryPoint: "./app"
          expires: '7d'
          target: 'test-web-app'
