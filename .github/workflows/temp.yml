name: temp

on:
  pull_request:

jobs:
  deploy-alpha-ios-app:
    runs-on: macos-13
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9

      - name: Install Codemagic CLI Tools
        run: pip3 install codemagic-cli-tools==0.39.1

      - name: Setup signing
        working-directory: app
        env:
          # The following secrets are used by the Codemagic CLI tool. It's important
          # to use the same names as the CLI tool expects.
          CERTIFICATE_PRIVATE_KEY: ${{ secrets.SHAREZONE_CERTIFICATE_PRIVATE_KEY }}
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_KEY_IDENTIFIER }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_PRIVATE_KEY }}
        run: |
          keychain initialize
          app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \
            --platform IOS \
            --type IOS_APP_STORE \
            --create
          keychain add-certificates
          xcode-project use-profiles

      - name: Set Flutter version from FVM config file to environment variables
        uses: kuhnroyal/flutter-fvm-config-action@6ffa30473b346f7d7c63cf9e03e6a886f940a72b

      - uses: subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          # Use format expected by FVM.
          # Else this won't be recognized as an installed version when setting
          # '.../flutter' as the FVM Flutter version cache folder.
          cache-path: "${{ runner.tool_cache }}/flutter/:version:"

      - name: Install FVM
        run: |
          flutter pub global activate fvm 2.4.1
          fvm config --cache-path '${{ runner.tool_cache }}/flutter'

      - name: Activate sz_repo_cli package
        run: fvm flutter pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

      # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
      - run: echo $(pwd)/bin >> $GITHUB_PATH

      - name: Deploy iOS alpha to TestFlight
        env:
          # The following secrets are used by the Codemagic CLI tool. It's important
          # to use the same names as the CLI tool expects.
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_KEY_IDENTIFIER }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_PRIVATE_KEY }}
        run: |
          # Because we are publishing every commit a new alpha version, we are
          # able to use the last commit message (title and description) as release
          # note for the alpha builds. This is not the most user friendly note but
          # it's better than nothing.
          #
          # The "sed 's/[<>]//g'" part is to remove the "<" and ">" characters
          # because the App Store doesn't allow them.
          export LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed 's/[<>]//g')

          # The App Store Connect API only allows a maximum of 4000 characters for
          # the release notes. So we need to truncate the commit message if it's
          # longer than 4000 characters.
          export SHORT_LAST_COMMIT_MESSAGE=${LAST_COMMIT_MESSAGE:0:4000}

          sz deploy ios \
            --stage alpha \
            --whats-new="$SHORT_LAST_COMMIT_MESSAGE" \
            --export-options-plist=$HOME/export_options.plist
