# Copyright (c) 2022 Sharezone UG (haftungsbeschrÃ¤nkt)
# Licensed under the EUPL-1.2-or-later.
#
# You may obtain a copy of the Licence at:
# https://joinup.ec.europa.eu/software/page/eupl
#
# SPDX-License-Identifier: EUPL-1.2

name: alpha

concurrency:
  # Our iOS builds require unique build numbers. Therefore, we should never
  # build a new version while a build is already running. This is why we use the
  # branch name as a concurrency group. This way, we can only build one version
  # per branch at the same time.
  group: alpha

on:
  push:
    branches:
      - main
    paths:
      # We only build and deploy a new version, when a user relevant files
      # changed.
      - "app/**"
      - "lib/**"
      # We trigger also this workflow, if this workflow is changed, so that new
      # changes will be applied.
      - ".github/workflows/alpha.yml"
      # The following paths are excluded from the above paths. It's important to
      # list the paths at the end of the file, so that the exclude paths are
      # applied.
      #
      # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-including-and-excluding-paths.
      - "!**.md"
      - "!**.mdx"
      - "!**.gitignore"
      # The macOS version of our app has no alpha program. Therefore, we don't
      # need to build it.
      - "!app/macos/**"
      # Test files are not relevant for the alpha program.
      - "!**/test/**"
      - "!**/test_driver/**"
      - "!**/integration_test/**"
      # Example files are not relevant for the alpha program.
      - "!**/example/**"
      - "!**/analysis_options.yaml"
      - "!**/dart_test.yaml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CI_CD_DART_SCRIPTS_PACKAGE_PATH: "tools/sz_repo_cli/"

# Set permissions to none.
#
# Using the broad default permissions is considered a bad security practice 
# and would cause alerts from our scanning tools.
permissions: {}
jobs:
  deploy-alpha-web-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set Flutter version from FVM config file to environment variables
      uses: kuhnroyal/flutter-fvm-config-action@v1

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        # Use format expected by FVM.
        # Else this won't be recognized as an installed version when setting
        # '.../flutter' as the FVM Flutter version cache folder.
        cache-path: '${{ runner.tool_cache }}/flutter/:version:'

    - name: Install FVM
      run: |
        flutter pub global activate fvm
        fvm config --cache-path '${{ runner.tool_cache }}/flutter'
    
    - name: Activate sz_repo_cli package
      run: fvm flutter pub global activate --source path "$CI_CD_DART_SCRIPTS_PACKAGE_PATH"

    # So we can just use "sz COMMAND" instead of "dart ../path/to/script.dart ..."
    - run: echo $(realpath ./bin) >> $GITHUB_PATH
    
    - name: Install firebase CLI
      run: |
        cd app
        sudo npm i -g firebase-tools

    - name: Build and deploy web-app
      env:
        SHAREZONE_PROD_KEY: ${{ secrets.FIREBASE_HOSTING_PROD_KEY }}
      run: |
        echo $SHAREZONE_PROD_KEY > sharezone-prod-key.json
        sz deploy web-app --stage alpha --message "Workflow $GITHUB_JOB, commit $GITHUB_SHA" --credentials sharezone-prod-key.json

  deploy-alpha-android-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set Flutter version from FVM config file to environment variables
      uses: kuhnroyal/flutter-fvm-config-action@v1

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        # Use format expected by FVM.
        # Else this won't be recognized as an installed version when setting
        # '.../flutter' as the FVM Flutter version cache folder.
        cache-path: '${{ runner.tool_cache }}/flutter/:version:'

    - name: Install FVM
      run: |
        flutter pub global activate fvm
        fvm config --cache-path '${{ runner.tool_cache }}/flutter'

    - name: Setup signing
      working-directory: app/android
      env:
        KEYSTORE_STRING: ${{ secrets.SHAREZONE_ANDROID_APP_KEYSTORE_STRING }}
        KEY_PASSWORD: ${{ secrets.SHAREZONE_ANDROID_APP_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.SHAREZONE_ANDROID_APP_KEY_ALIAS }}
        STORE_PASSWORD: ${{ secrets.SHAREZONE_ANDROID_APP_STORE_PASSWORD }}
      run: |
        echo $KEYSTORE_STRING | base64 -di > app/key.jks
        echo "storePassword=$STORE_PASSWORD" >> key.properties
        echo "keyPassword=$KEY_PASSWORD" >> key.properties
        echo "keyAlias=$KEY_ALIAS" >> key.properties
        echo "storeFile=key.jks" >> key.properties
    
    - name: Build Android
      working-directory: app
      run: | 
        # We are publishing APKs instead of App Bundles to Firebase Distribution
        # because they easier to install. App Bundles are installed via the
        # PlayStore which resulted in problems in the past.

        fvm flutter build apk \
          --release \
          --flavor prod \
          --target=lib/main_prod.dart \
          --dart-define DEVELOPMENT_STAGE=ALPHA

    - name: Install Firebase CLI
      run: sudo npm i -g firebase-tools

    - name: Publish to Firebase Distribution
      working-directory: app
      env:
        FIREBASE_DISTRIBUTION_KEY: ${{ secrets.GCP_SA_FIREBASE_DISTRIBUTION_PROD_KEY }}
      run: |
        # Set up credentials for Firebase Distribution
        echo $FIREBASE_DISTRIBUTION_KEY > sharezone-prod-key.json
        export GOOGLE_APPLICATION_CREDENTIALS=sharezone-prod-key.json
        
        # Because we are publishing every commit a new alpha version, we are
        # able to use the last commit message (title and description) as release
        # note for the alpha builds. This is not the most user friendly note but
        # it's better than nothing.
        export LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        
        firebase appdistribution:distribute build/app/outputs/flutter-apk/app-prod-release.apk \
          --app 1:730263787697:android:f0a3b3b856fd1383 \
          --groups "alpha" \
          --release-notes "$LAST_COMMIT_MESSAGE"

  deploy-alpha-ios-app:
    runs-on: macos-latest
    timeout-minutes: 120
    defaults:
      run:
        working-directory: app
    steps:
    - uses: actions/checkout@v3

    - name: Install Codemagic CLI Tools
      run: pip3 install codemagic-cli-tools

    - name: Setup signing
      env:
        CERTIFICATE_PRIVATE_KEY: ${{ secrets.SHAREZONE_CERTIFICATE_PRIVATE_KEY }}
        # The following secrets are used by the Codemagic CLI tool. It's important
        # to use the same names as the CLI tool expects.
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_KEY_IDENTIFIER }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        keychain initialize
        app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \
          --platform IOS \
          --type IOS_APP_STORE \
          --certificate-key=@env:CERTIFICATE_PRIVATE_KEY \
          --create
        keychain add-certificates
        xcode-project use-profiles

    - name: Set Flutter version from FVM config file to environment variables
      uses: kuhnroyal/flutter-fvm-config-action@v1

    - uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        # Use format expected by FVM.
        # Else this won't be recognized as an installed version when setting
        # '.../flutter' as the FVM Flutter version cache folder.
        cache-path: '${{ runner.tool_cache }}/flutter/:version:'

    - name: Install FVM
      run: |
        flutter pub global activate fvm
        fvm config --cache-path '${{ runner.tool_cache }}/flutter'
    
    - name: Build iOS app
      env:
        # From https://appstoreconnect.apple.com/apps/1434868489/
        IOS_APP_ID: 1434868489
        # The following secrets are used by the Codemagic CLI tool. It's important
        # to use the same names as the CLI tool expects.
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_KEY_IDENTIFIER }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        # Because TestFlight requires a build number that is higher than the
        # latest build number, we need to get the latest build number and
        # increment it by one.
        #
        # The "| head -2 | tail -1" part is to get the second line of the output
        # of the "app-store-connect get-latest-build-number" command because the
        # second line includes the build number.
        LATEST_BUILD_NUMBER=$(app-store-connect get-latest-build-number $IOS_APP_ID | head -2 | tail -1)
        BUMPED_BUILD_NUMBER=$(expr $LATEST_BUILD_NUMBER + 1)

        fvm flutter build ipa \
          --release \
          --flavor prod \
          --target lib/main_prod.dart \
          --dart-define DEVELOPMENT_STAGE=ALPHA \
          --export-options-plist=$HOME/export_options.plist \
          --build-number $BUMPED_BUILD_NUMBER

    - name: Publish to App Store Connect
      env:
        # The following secrets are used by the Codemagic CLI tool. It's important
        # to use the same names as the CLI tool expects.
        APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_KEY_IDENTIFIER }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.SHAREZONE_APP_STORE_CONNECT_PRIVATE_KEY }}
      run: |
        # Because we are publishing every commit a new alpha version, we are
        # able to use the last commit message (title and description) as release
        # note for the alpha builds. This is not the most user friendly note but
        # it's better than nothing.
        export LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)

        app-store-connect publish \
          --path build/ios/ipa/*.ipa \
          --beta-group=alpha \
          --testflight \
          --release-type=AFTER_APPROVAL \
          --whats-new="$LAST_COMMIT_MESSAGE"
